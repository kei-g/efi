/*
 * efi-mpsp.h
 *
 * Multi-Processor services protocol.
 */

#ifndef __EFI_MPSP_H
#define __EFI_MPSP_H

#include <efi.h>

#define EFI_MP_SERVICES_PROTOCOL_GUID                                              \
  {                                                                                \
    0x3fdda605, 0xa76e, 0x4f46, { 0xad, 0x29, 0x12, 0xf4, 0x53, 0x1b, 0x3d, 0x08 } \
  }

typedef struct _EFI_CPU_PHYSICAL_LOCATION EFI_CPU_PHYSICAL_LOCATION;
typedef struct _EFI_CPU_PHYSICAL_LOCATION2 EFI_CPU_PHYSICAL_LOCATION2;
typedef struct _EFI_MP_SERVICES_PROTOCOL EFI_MP_SERVICES_PROTOCOL;
typedef struct _EFI_PROCESSOR_INFORMATION EFI_PROCESSOR_INFORMATION;
typedef union _EXTENDED_PROCESSOR_INFORMATION EXTENDED_PROCESSOR_INFORMATION;

typedef VOID (*EFI_AP_PROCEDURE)(VOID *Arg);

typedef EFI_STATUS (*EFI_MP_SERVICES_ENABLEDISABLEAP)(EFI_MP_SERVICES_PROTOCOL *This, UINTN ProcessorNumber, BOOLEAN EnableAP, UINT32 *HealthFlag);
typedef EFI_STATUS (*EFI_MP_SERVICES_GET_NUMBER_OF_PROCESSORS)(EFI_MP_SERVICES_PROTOCOL *This, UINTN *NumberOfProcessors, UINTN *NumberOfEnabledProcessors);
typedef EFI_STATUS (*EFI_MP_SERVICES_GET_PROCESSOR_INFO)(EFI_MP_SERVICES_PROTOCOL *This, UINTN ProcessorNumber, EFI_PROCESSOR_INFORMATION *ProcessorInfo);
typedef EFI_STATUS (*EFI_MP_SERVICES_STARTUP_ALL_APS)(EFI_MP_SERVICES_PROTOCOL *This, EFI_AP_PROCEDURE Procedure, UINT8 SingleThread, EFI_EVENT WaitEvent, UINTN TimeoutInMicroseconds, VOID *Arg, UINTN **FailedCpuList);
typedef EFI_STATUS (*EFI_MP_SERVICES_STARTUP_THIS_AP)(EFI_MP_SERVICES_PROTOCOL *This, EFI_AP_PROCEDURE Procedure, UINTN ProcessorNumber, EFI_EVENT WaitEvent, UINTN TimeoutInMicroseconds, VOID *Arg, BOOLEAN *Finished);
typedef EFI_STATUS (*EFI_MP_SERVICES_SWITCH_BSP)(EFI_MP_SERVICES_PROTOCOL *This, UINTN ProcessorNumber, BOOLEAN EnableOldBSP);
typedef EFI_STATUS (*EFI_MP_SERVICES_WHOAMI)(EFI_MP_SERVICES_PROTOCOL *This, UINTN *ProcessorNumber);

struct _EFI_CPU_PHYSICAL_LOCATION {
  UINT32 Package;
  UINT32 Core;
  UINT32 Thread;
};

struct _EFI_CPU_PHYSICAL_LOCATION2 {
  UINT32 Package;
  UINT32 Module;
  UINT32 Tile;
  UINT32 Die;
  UINT32 Core;
  UINT32 Thread;
};

union _EXTENDED_PROCESSOR_INFORMATION {
  EFI_CPU_PHYSICAL_LOCATION2 Location2;
};

struct _EFI_PROCESSOR_INFORMATION {
  UINT64 ProcessorId;
  UINT32 StatusFlag;
  EFI_CPU_PHYSICAL_LOCATION Location;
  EXTENDED_PROCESSOR_INFORMATION ExtendedInformation;
};

struct _EFI_MP_SERVICES_PROTOCOL {
  EFI_MP_SERVICES_GET_NUMBER_OF_PROCESSORS GetNumberOfProcessors;
  EFI_MP_SERVICES_GET_PROCESSOR_INFO GetProcessorInfo;
  EFI_MP_SERVICES_STARTUP_ALL_APS StartupAllAPs;
  EFI_MP_SERVICES_STARTUP_THIS_AP StartupThisAP;
  EFI_MP_SERVICES_SWITCH_BSP SwitchBSP;
  EFI_MP_SERVICES_ENABLEDISABLEAP EnableDisableAP;
  EFI_MP_SERVICES_WHOAMI WhoAmI;
};

#define END_OF_CPU_LIST 0xffffffff

#define PROCESSOR_AS_BSP_BIT 0x00000001
#define PROCESSOR_ENABLED_BIT 0x00000002
#define PROCESSOR_HEALTH_STATUS_BIT 0x00000004

#endif /* __EFI_MPSP_H */
